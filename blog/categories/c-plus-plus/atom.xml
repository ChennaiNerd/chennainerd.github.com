<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: c++ | Chennai Nerd]]></title>
  <link href="http://www.chennainerd.in/blog/categories/c-plus-plus/atom.xml" rel="self"/>
  <link href="http://www.chennainerd.in/"/>
  <updated>2014-06-11T16:27:21+05:30</updated>
  <id>http://www.chennainerd.in/</id>
  <author>
    <name><![CDATA[Chennai Nerd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GCOV - C/C++ Code coverage testing tool]]></title>
    <link href="http://www.chennainerd.in/blog/2014/06/08/gcov-c-slash-c-plus-plus-code-coverage-testing-tool/"/>
    <updated>2014-06-08T11:39:18+05:30</updated>
    <id>http://www.chennainerd.in/blog/2014/06/08/gcov-c-slash-c-plus-plus-code-coverage-testing-tool</id>
    <content type="html"><![CDATA[<h2>What is GCOV</h2>

<ul>
<li>GCC provides GCOV, code coverage testing tool for C/C++ programs.</li>
<li>GCOV identifies the lines of code that got executed while running the program.</li>
<li>It also gives additional information like how many times particular line got executed.</li>
<li>Also provides information about how many possible branches are there in the code and which branch path got executed more.</li>
</ul>


<h2>Use cases</h2>

<h3>Optimization</h3>

<p>GCOV identifies the sections in the code that are heavy executed,
using which we&rsquo;ll be able to <strong>focus on optimizing the parts of the code
which are executed often</strong>.</p>

<h3>Identifying dead code</h3>

<p>Any code that got compiled but never got executed on any possible scenario can be
found using GCOV.  Removing such code can help in <strong>reducing the memory footprint</strong>
of the program.  This can be vital information for programs running on embedded platforms.</p>

<h3>Reliability of testing</h3>

<p>The coverage report can help in <strong>identifying the gaps in testing</strong>.<br/>
The coverage information can be used for writing test cases to exercise
the uncovered area in the code.</p>

<h2>Instrumenting GCOV</h2>

<p>GCOV does not require any change in the code. The only requirement is to have the code built with <strong>-fprofile-arcs</strong> and
<strong>-ftest-coverage</strong>  compiler and linker flags.</p>

<p>```
yogi@u32:~/gcov_basics$ ls -l
total 8
-rwxrwx&mdash;&ndash; 1 yogi vboxsf 131 Jun  7 15:13 coverage.c
-rwxrwx&mdash;&ndash; 1 yogi vboxsf 286 Jun  7 15:56 Makefile
yogi@u32:~/gcov_basics$ cat coverage.c</p>

<h1>include &lt;stdio.h></h1>

<p>int main(int argc, char* argv[])
{
  if (argc == 1)</p>

<pre><code>printf("True\n");
</code></pre>

<p>  else</p>

<pre><code>printf("False\n");
</code></pre>

<p>  return 0;
}
yogi@u32:~/gcov_basics$ cat Makefile
CC=gcc
CFLAGS=-fprofile-arcs -ftest-coverage
LDFLAGS=-fprofile-arcs -ftest-coverage
TARGET=cov
SRC=coverage.c</p>

<p>all:    obj
  $(CC) $(LDFLAGS) <em>.o -o $(TARGET)
obj:
  $(CC) $(CFLAGS) -c $(SRC)
clean:
  rm -f $(TARGET) </em>.html <em>.gc</em> *.o
gcov:
  gcovr -r . &mdash;html -o coverage.html &mdash;html-details
```</p>

<blockquote><p>CFLAGS += -fprofile-arcs -ftest-coverage</p></blockquote>

<p><code>CFLAGS</code> are meant to be used during compilation. This will create <code>.gcno</code> file corresponding to <code>.c/.cpp</code> file</p>

<p><code>
yogi@u32:~/gcov_basics$ make obj
gcc -fprofile-arcs -ftest-coverage -c coverage.c
yogi@u32:~/gcov_basics$ ls -l
total 16
-rwxrwx--- 1 yogi vboxsf  131 Jun  7 15:13 coverage.c
-rw-rw-r-- 1 yogi yogi    396 Jun  7 15:56 coverage.gcno
-rw-rw-r-- 1 yogi yogi   1824 Jun  7 15:56 coverage.o
-rwxrwx--- 1 yogi vboxsf  286 Jun  7 15:56 Makefile
</code></p>

<blockquote><p>LDFLAGS += -fprofile-arcs -ftest-coverage</p></blockquote>

<p><code>LDFLAGS</code> are meant to be used during linking.</p>

<p><code>
yogi@u32:~/gcov_basics$ make
gcc -fprofile-arcs -ftest-coverage -c coverage.c
gcc -fprofile-arcs -ftest-coverage *.o -o cov
yogi@u32:~/gcov_basics$ ls -l
total 36
-rwxrwxr-x 1 yogi yogi   17295 Jun  7 15:56 cov
-rwxrwx--- 1 yogi vboxsf   131 Jun  7 15:13 coverage.c
-rw-rw-r-- 1 yogi yogi     396 Jun  7 15:56 coverage.gcno
-rw-rw-r-- 1 yogi yogi    1824 Jun  7 15:56 coverage.o
-rwxrwx--- 1 yogi vboxsf   286 Jun  7 15:56 Makefile
</code></p>

<p><code>
yogi@u32:~/gcov_basics$ ./cov
True
yogi@u32:~/gcov_basics$ ls -l
total 40
-rwxrwxr-x 1 yogi yogi   17295 Jun  7 15:56 cov
-rwxrwx--- 1 yogi vboxsf   131 Jun  7 15:13 coverage.c
-rw-rw-r-- 1 yogi yogi     160 Jun  7 15:56 coverage.gcda
-rw-rw-r-- 1 yogi yogi     396 Jun  7 15:56 coverage.gcno
-rw-rw-r-- 1 yogi yogi    1824 Jun  7 15:56 coverage.o
-rwxrwx--- 1 yogi vboxsf   286 Jun  7 15:56 Makefile
</code></p>

<p><code>.gcno</code> has static information about the file.</p>

<p><code>.gcda</code> has dynamic information about the file based on the path taken during execution.</p>

<p><code>.gcno</code> and .gcda files together are required to generate the coverage report.</p>

<h2>Generating Report</h2>

<p>Either <strong>gcov</strong> or <strong>gcovr</strong> can be used for generating coverage report.</p>

<p><strong>gcov</strong> utility will be installed as part of <strong>gcc</strong> in most of the Linux distributions.</p>

<p>```
yogi@u32:~/gcov_basics$ gcov coverage.c
File &lsquo;coverage.c&rsquo;
Lines executed:80.00% of 5
coverage.c:creating &lsquo;coverage.c.gcov&rsquo;</p>

<p>yogi@u32:~/gcov_basics$ cat coverage.c.gcov</p>

<pre><code>    -:    0:Source:coverage.c
    -:    0:Graph:coverage.gcno
    -:    0:Data:coverage.gcda
    -:    0:Runs:1
    -:    0:Programs:1
    -:    1:#include &lt;stdio.h&gt;
    1:    2:int main(int argc, char* argv[])
    -:    3:{
    1:    4:    if (argc == 1)
    1:    5:        printf("True\n");
    -:    6:    else
#####:    7:        printf("False\n");
    1:    8:    return 0;
    -:    9:}
</code></pre>

<p>```</p>

<p><code>
Legend:
  -       indicates not an executable statement
  #####   indicates statement the did not get executed
  1       (or any number) indicates the number of times the statement got executed.
</code></p>

<p><strong>gcovr</strong> is a python utility on top of gcov.  It can be installed using pip.</p>

<p><code>
$ pip install gcovr
</code></p>

<p><code>
yogi@u32:~/gcov_basics$ gcovr -r . --html -o coverage.html --html-details
</code></p>

<p>The above command will generate coverage report in html format.</p>

<h2>Cool features</h2>

<ul>
<li><p>GCOV takes care of <strong>conditional compilation</strong>.  If a file has 100 lines of code but only 50 lines of code got conditionally compiled using ifdef, then, only 50 lines is taken into account for calculating the code coverage.</p></li>
<li><p>GCOV when enabled on <strong>shared library</strong> and called from two different applications, will consolidate the coverage based on execution of both the applications.</p></li>
<li><p>GCOV works <strong>across reboot</strong>.  The execution information can be collected and consolidated across reboot.</p></li>
<li><p>Running the <strong>same executable multiple instances</strong>, appends execution information to .gcda file.</p></li>
<li><p>Coverage can be <strong>collected from different physical</strong> machines by copying the executable and .gcda files.</p></li>
</ul>


<h2>Pointer to ponder</h2>

<ul>
<li><p>The <strong>number of lines in the file does not match exactly with the number of lines considered for testing coverage</strong>.  One reason is, <strong>not all lines are statement</strong> to be executed. Say, { in a line is not a candidate for execution. The next is could be due to <strong>compiler optimization</strong>.</p></li>
<li><p>The <strong>version of .gcno file and .gcda file should exactly match</strong> to generate report.  If the code was compiled again even without any change, report will not get generated as there is mismatch in the version of .gcno and .gcda files.</p></li>
<li><p>If .gcno file was created again even without changing anything in the code it will not match with .gcda file.</p></li>
<li><p>The program should <strong>gracefully exit</strong> to create/append-to .gcda file.</p></li>
<li><p>If the program is a daemon, better to add <strong>exit(0) in the SIGINT and SIGTERM signal handler.</strong> to do a graceful exit.</p></li>
<li><p>GCOV will try to create <strong>.gcda file in the same folder structure as it was compiled</strong>.
But the problem could be when used on embedded platforms, where the filesystem is mostly readonly.
In this case, <strong>GCOV_PREFIX</strong> enviromental variable can be used.</p></li>
</ul>


<p>```
yogi@u32:~/gcov_basics$ make
gcc -fprofile-arcs -ftest-coverage -c coverage.c
gcc -fprofile-arcs -ftest-coverage *.o -o cov</p>

<p>Note: Copying the executable to /tmp folder</p>

<p>yogi@u32:~/gcov_basics$ cp cov /tmp/
yogi@u32:~/gcov_basics$ ls -l
total 36
-rwxrwxr-x 1 yogi yogi   17295 Jun  8 07:30 cov
-rwxrwx&mdash;&ndash; 1 yogi vboxsf   131 Jun  7 15:13 coverage.c
-rw-rw-r&mdash; 1 yogi yogi     396 Jun  8 07:30 coverage.gcno
-rw-rw-r&mdash; 1 yogi yogi    1824 Jun  8 07:30 coverage.o
-rwxrwx&mdash;&ndash; 1 yogi vboxsf   286 Jun  7 16:32 Makefile
yogi@u32:~/gcov_basics$ cd /tmp/
yogi@u32:/tmp$ ./cov
True
yogi@u32:/tmp$ find . -name &ldquo;*.gcda&rdquo;</p>

<p>Note: gcda file will not get created in the current working directory, instead
will be created in the same folder structure as it got compiled.</p>

<p>yogi@u32:/tmp$ cd &ndash;
/home/yogi/gcov_basics</p>

<p>Note: gcda file getting created where the code was actually compiled.</p>

<p>yogi@u32:~/gcov_basics$ ls -l
total 40
-rwxrwxr-x 1 yogi yogi   17295 Jun  8 07:30 cov
-rwxrwx&mdash;&ndash; 1 yogi vboxsf   131 Jun  7 15:13 coverage.c
-rw-rw-r&mdash; 1 yogi yogi     160 Jun  8 07:30 coverage.gcda
-rw-rw-r&mdash; 1 yogi yogi     396 Jun  8 07:30 coverage.gcno
-rw-rw-r&mdash; 1 yogi yogi    1824 Jun  8 07:30 coverage.o
-rwxrwx&mdash;&ndash; 1 yogi vboxsf   286 Jun  7 16:32 Makefile
yogi@u32:~/gcov_basics$
yogi@u32:~/gcov_basics$ export GCOV_PREFIX=/tmp
yogi@u32:~/gcov_basics$ rm coverage.gcda
yogi@u32:~/gcov_basics$ cd &ndash;
/tmp
yogi@u32:/tmp$ ./cov
True</p>

<p>Note: By setting GCOV_PREFIX environmental variable we&rsquo;ll be able to direct
the files to a particular base folder.</p>

<p>yogi@u32:/tmp$ ls -l /tmp/home/yogi/gcov_basics/coverage.gcda
-rw-rw-r&mdash; 1 yogi yogi 160 Jun  8 07:31 /tmp/home/yogi/gcov_basics/coverage.gcda
```</p>

<ul>
<li><strong>GCOV_PREFIX_STRIP</strong> environmental variable can be handy when we are not interested in complete folder structure but to remove certain part of it.</li>
</ul>


<p>```
yogi@u32:/tmp$ export GCOV_PREFIX=/tmp
yogi@u32:/tmp$ export GCOV_PREFIX_STRIP=2
yogi@u32:/tmp$ ./cov
True</p>

<p>Note:  Earlier .gcda file was getting created in /tmp/home/yogi/gcov_basics/ folder.
Now by exporting GCOV_PREFIX_STRIP=2 environmental variable, will strip two levels &ndash; /home/yogi/ folder
is stripped off and .gcda file will get create in /tmp/gcov_basics/</p>

<p>yogi@u32:/tmp$ ls -l /tmp/gcov_basics/coverage.gcda
-rw-rw-r&mdash; 1 yogi yogi 160 Jun  8 07:44 /tmp/gcov_basics/coverage.gcda</p>

<p>```</p>

<h2>FAQs</h2>

<p>1.undefined reference to <code>__gcov_init</code></p>

<p><code>
yogi@u32:~/gcov_basics$ make
gcc -fprofile-arcs -ftest-coverage -c coverage.c
gcc  *.o -o cov
coverage.o: In function `_GLOBAL__sub_I_65535_0_main':
coverage.c:(.text+0xae): undefined reference to `__gcov_init'
coverage.o:(.data+0x24): undefined reference to `__gcov_merge_add'
collect2: ld returned 1 exit status
make: *** [all] Error 1
</code></p>

<blockquote><p>The reason for this is, <strong>-fprofile-arcs</strong> and <strong>-ftest-coverage</strong> where used during compilation(in CFLAGS), but missed during linking (in LDFLAGS).</p></blockquote>

<p>2.<code>.gcda</code> file not getting created as the result of execution.</p>

<blockquote><p>Check if gcov symbols are there in the binary using <strong>strings</strong> or <strong>nm</strong> command.</p>

<p><strong>ldd</strong> command <strong>will not help</strong> because there will not be any extra libraries linked specifically for gcov.</p></blockquote>

<p>Binary <strong>without gcov symbols</strong> will look like the one shown below.</p>

<p><code>
yogi@u32:~/gcov_basics$ strings cov
/lib/ld-linux.so.2
__gmon_start__
libc.so.6
_IO_stdin_used
puts
__libc_start_main
GLIBC_2.0
PTRh
UWVS
[^_]
True
False
;*2$"
</code></p>

<p>Binary <strong>with gcov symbols</strong> will look like the one shown below.</p>

<p><code>
yogi@u32:~/gcov_basics$ strings cov
/lib/ld-linux.so.2
__gmon_start__
libc.so.6
_IO_stdin_used
...
[^_]
True
False
/home/yogi/gcov_basics/coverage.gcda
profiling:%s:Version mismatch - expected %.4s got %.4s
profiling:%s:Overflow merging
profiling:%s:Overflow writing
profiling:%s:Cannot create directory
profiling:%s:Not a gcov data file
profiling:%s:Merge mismatch for %s
profiling:%s:Invocation mismatch - some data files may have been removed%s
function
summaries
profiling:%s:Error merging
profiling:%s:Error writing
GCOV_PREFIX_STRIP
GCOV_PREFIX
profiling:%s:Skip
profiling:%s:Cannot open
...
</code></p>

<blockquote><p>The reason for this could be <strong>-fprofile-arcs and -ftest-coverage CFLAGS</strong> were missed during compilation.</p></blockquote>

<p>3.gcov symbols are seen in the binary but still .gcda file is not getting created.</p>

<blockquote><p>The reason could be the program did not do a graceful exit.</p></blockquote>

<p> We’d love to hear more about your experiences with c/c++ code coverage.
 Please share your thoughts in the comments below.</p>
]]></content>
  </entry>
  
</feed>
