<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Chennai Nerd]]></title>
  <link href="http://ChennaiJS.github.io/atom.xml" rel="self"/>
  <link href="http://ChennaiJS.github.io/"/>
  <updated>2014-02-22T15:44:36+05:30</updated>
  <id>http://ChennaiJS.github.io/</id>
  <author>
    <name><![CDATA[Chennai Nerd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[C programmer's experience with AngularJS]]></title>
    <link href="http://ChennaiJS.github.io/blog/2014/02/22/c-programmers-experience-with-angularjs/"/>
    <updated>2014-02-22T15:29:28+05:30</updated>
    <id>http://ChennaiJS.github.io/blog/2014/02/22/c-programmers-experience-with-angularjs</id>
    <content type="html"><![CDATA[<p>The intended audience for this blog are not the people who have profound knowledge in HTML and Javascript.  This is only for those who are in inertia to experiment with web development.  Also, please be aware that this is not beginner&rsquo;s tutorial for AngularJS.</p>

<p>I have this habit of trying some web related stuff rarely once in a year.  Couple of years back on a fine morning started to play with jQuery and was impressed by its power.  But at the end of the day thought there is so much to APIs to remember or at least be aware of. Then decided, it&rsquo;s not going to work out for me and that was the last time I tried anything on the web.</p>

<p>Last week I had a chance to play with AngularJS and my immediate reaction was &ldquo;WoW!!!&rdquo;. After my first encounter with AngularJS I thought this is not going to be just one day affair and fell in love with AngularJS. During the course of this blog I&rsquo;ll walk you through the features of AngularJS which impressed me.</p>

<h4>Framework and library:</h4>

<p>First of all, AngularJS is not library like jQuery, it is a framework.  So there is no onus of remembering the APIs.</p>

<h4>Empowering HTML:</h4>

<p>HTML was born when the intention of web was only to display static content.  As the name suggests that is only a markup language &ndash; nothing wrong, nobody to blame. The people who designed that had only scoped for that.  But now, the web is not that simple.
And being a C programmer I wished if there is anyway to add if condition, loop, block scope in HTML.  AngularJS comes as a prosthetic limb for the handicapped HTML.</p>

<p>To display an element only when a condition is met (i.e.,) having a if construct. This is possible in AngularJS using <code>ng-if</code> or <code>ng-show</code> directive.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;input type="text" ng-model="customer.name" ng-if="customer.edit"&gt;
</span><span class='line'>&lt;span ng-bind="customer.name" ng-if="!customer.edit"&gt;&lt;/span&gt;</span></code></pre></td></tr></table></div></figure>


<p>If customer.edit is set true, customer.name will be displayed in text box, else will be displayed in span.</p>

<p>To iterate through a array of items and create a <code>&lt;ul&gt;</code> or <code>&lt;li&gt;</code> or even populate a
<code>&lt;table&gt;</code>.  <code>ng-repeat</code> directive does the job.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;table&gt;
</span><span class='line'>    &lt;thead&gt;
</span><span class='line'>        &lt;tr&gt;
</span><span class='line'>            &lt;th&gt;Name&lt;/th&gt;
</span><span class='line'>            &lt;th&gt;Amount&lt;/th&gt;
</span><span class='line'>            &lt;th&gt;ROI&lt;/th&gt;
</span><span class='line'>        &lt;/tr&gt;
</span><span class='line'>    &lt;/thead&gt;
</span><span class='line'>    &lt;tbody&gt;
</span><span class='line'>        &lt;tr ng-repeat="customer in customers"&gt;
</span><span class='line'>            &lt;td ng-bind="customer.name"&gt;&lt;/td&gt;
</span><span class='line'>            &lt;td ng-bind="customer.amount"&gt;&lt;/td&gt;
</span><span class='line'>            &lt;td ng-bind="customer.roi"&gt;&lt;/td&gt;
</span><span class='line'>        &lt;/tr&gt;
</span><span class='line'>    &lt;/tbody&gt;
</span><span class='line'>&lt;/table&gt;</span></code></pre></td></tr></table></div></figure>


<p>To restrict the scope of variables and functions within a block, <code>ng-controller</code> can be used.
Though the use of <code>ng-controller</code> is more than that.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;script&gt;
</span><span class='line'>    angular.module("bank", []).
</span><span class='line'>    controller('BankController',
</span><span class='line'>        function BankController($scope) {
</span><span class='line'>            $scope.customers = [name:'kansamy', amount:'1000', roi:'9', edit:0}, {name:'munsamy', amount:'300', roi:'2', edit:0}];
</span><span class='line'>            $scope.customer = {name:'', amount:'', roi:'', edit:0};
</span><span class='line'>        });
</span><span class='line'>&lt;script&gt;
</span><span class='line'>&lt;body ng-app="bank" ng-controller="BankController"&gt;
</span><span class='line'>...
</span><span class='line'>&lt;/body&gt;</span></code></pre></td></tr></table></div></figure>


<p>The scope of bank controller is throughout the <code>&lt;body&gt;</code>.
This scope can be restricted to any <code>&lt;div&gt;</code> or any other element by setting
<code>ng-controller</code> accordingly. <code>$scope</code> variable has a special meaning mapping to
the scope of the controller.</p>

<p>There is much more talk to about AngularJS &ndash; what I have captured here is only the picture of love at first sight.</p>

<p>I have hosted a simple no use application exercising these features of AngularJS
<a href="https://brilliant-fire-1717.firebaseapp.com/bank.html">https://brilliant-fire-1717.firebaseapp.com/bank.html</a></p>

<p>No wonder, these features can one day become integral part of HTML.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tips for fasten your workflow in terminal]]></title>
    <link href="http://ChennaiJS.github.io/blog/2014/02/18/tips-for-faster-workflow-in-terminal/"/>
    <updated>2014-02-18T18:00:13+05:30</updated>
    <id>http://ChennaiJS.github.io/blog/2014/02/18/tips-for-faster-workflow-in-terminal</id>
    <content type="html"><![CDATA[<p>Without a doubt and question, Terminal is home for all programmers.
It always wonderful to have shortcuts to save our precious seconds.
Here we will discuss about techniques to fasten your workflow.
Place all <code>bash</code> function and aliases inside your <code>.bash_profile</code> or <code>.bashrc</code>.</p>

<h3>Create and Change Directory</h3>

<p>Generally, we create a folder and then <code>cd</code> to created directory.
We can do it by</p>

<pre><code>take ()
{
    mkdir -p $1 &amp;&amp; cd $1
}
</code></pre>

<p>Type <code>take foobar</code> will create and change directory to <code>foobar</code></p>

<h3>Run static server</h3>

<p>If you are a web developer, you wanted to view static files in browser.
Run your static server by</p>

<pre><code>server ()
{
    local port="${1:-8000}";
    open "http://localhost:${port}/";
    python -c 'import SimpleHTTPServer;
    map = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;
    map[""] = "text/plain";
    for key, value in map.items():
        map[key] = value + ";charset=UTF-8";
    SimpleHTTPServer.test();' "$port"
}
</code></pre>

<p>Type <code>server</code> insider any directory and visit <code>http://localhost:8000/</code> in browser</p>

<h3>Git aliases</h3>

<p>If you are a git user, following aliases will save your time a lot.</p>

<pre><code>alias gcl='git clone'
alias ga='git add .'
alias gall='git add -A'
alias gst='git status'
alias gc='git commit -v'
alias gco='git checkout'
alias gl='git pull'
alias gp='git push'
alias gpo='git push origin'
</code></pre>

<h3>Run previous command</h3>

<p><code>!!</code> represents the previous command. Most of the time, we forgot to type sudo for
some command.</p>

<pre><code>sudo !!
</code></pre>

<p>Above will run the previous command with <code>sudo</code>. CAUTION: Your previous command MUST NOT BE
 <code>rm -rf /</code> :).</p>

<h3>Go back to old directory</h3>

<p>Sometimes we want to change directory to previous working directory which we changed from. And revert to previous working directory we can use same command. This is vary much useful cd command.</p>

<pre><code>cd -
</code></pre>

<p>We know, there are lot of cool tips out there. Share with us what you got.
Happy hacking.</p>
]]></content>
  </entry>
  
</feed>
