<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Chennai Nerd]]></title>
  <link href="http://www.chennainerd.in/atom.xml" rel="self"/>
  <link href="http://www.chennainerd.in/"/>
  <updated>2014-06-11T15:38:30+05:30</updated>
  <id>http://www.chennainerd.in/</id>
  <author>
    <name><![CDATA[Chennai Nerd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How github hide email from spam bots in Profile page]]></title>
    <link href="http://www.chennainerd.in/blog/2014/06/11/how-github-hide-email-from-spam-bots-in-profile-page/"/>
    <updated>2014-06-11T14:29:29+05:30</updated>
    <id>http://www.chennainerd.in/blog/2014/06/11/how-github-hide-email-from-spam-bots-in-profile-page</id>
    <content type="html"><![CDATA[<p>As a i am a developer, i uses Github a lot. I love it more than any site.
I used to see my Github profile page because i feel very happy to see a heat chart with
lot of green dots. Since my network is somewhat slow, all the time i could
see <code>{email}</code> instead of my email address. I thought it is due to client
side rendering. But it does not happen for all other fields like <code>name</code>, <code>location</code>
and <code>website</code>. Only <code>email</code> field is rendered in client side.</p>

<p><code>Why?</code> I google it and I found that it is to avoid <code>Spam Bots</code> to crawl the email address.
Basically, The spam bots crawls the site and check for email address and then used them
to send ads and other unwanted mails. You might see email address in the site like
<code>kumar [at] gmail [dot] com</code>. This method is also used in the past to confuse spam bots.</p>

<p>Lets see how Github might implemented this method. Following is the html code
returned from server for Github Profile page(eg: <a href="https://github.com/visionmedia">https://github.com/visionmedia</a>)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> &lt;a
</span><span class='line'>     class="email js-obfuscate-email"
</span><span class='line'>     data-email="%74%6a%40%76%69%73%69%6f%6e%2d%6d%65%64%69%61%2e%63%61"
</span><span class='line'>     href="mailto:{email}"&gt;
</span><span class='line'>       {email}
</span><span class='line'> &lt;/a&gt;</span></code></pre></td></tr></table></div></figure>


<p>You can see <code>{email}</code> in the place of email address and another field <code>data-email</code>.
<a href="http://stackoverflow.com/users/2151331/fajarkoe">fajarkoe</a> explains how it works</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>The content of data-email is just the hexadecimal version of your email address
</span><span class='line'>"tj@vision-media.ca".
</span><span class='line'>
</span><span class='line'>It is a sequence of hexadecimal characters, where each character is of the
</span><span class='line'>form %XY, where X and Y are hexadecimal digits (0-f). For example,
</span><span class='line'>the first two hexadecimal characters in your case are %66 and %69.
</span><span class='line'>If you look at the ASCII table (http://en.wikipedia.org/wiki/ASCII),
</span><span class='line'>the symbol that corresponds to ASCII with hexadecimal number 66 is "f",
</span><span class='line'>while for hexadecimal number 69 is "i".
</span><span class='line'>
</span><span class='line'>You can use play around with this tool http://www.asciitohex.com/.</span></code></pre></td></tr></table></div></figure>


<p>Once the page is rendered in the browser, hexa decimal value is converted to <code>ascii</code> as follows</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function hex2a(hexx) {
</span><span class='line'>  var hex = hexx.toString();//force conversion
</span><span class='line'>  var str = '';
</span><span class='line'>  for (var i = 0; i &lt; hex.length; i += 2)
</span><span class='line'>      str += String.fromCharCode(parseInt(hex.substr(i, 2), 16));
</span><span class='line'>  return str;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>var $email = $('a.js-obfuscate-email');
</span><span class='line'>var hexaEmail = $email.data('email');
</span><span class='line'>hexaEmail = hexaEmail.replace(/%/g, '')
</span><span class='line'>var email = hex2a(hexaEmail);</span></code></pre></td></tr></table></div></figure>


<p>Once you get the email, the email is updated in DOM element as follows</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var $email = $('a.js-obfuscate-email');
</span><span class='line'>$email.attr('href', 'mailto:' + email);
</span><span class='line'>$email.text(email);</span></code></pre></td></tr></table></div></figure>


<p>That’s All Folks. Hope this tutorial helped you in understanding method to hide email from spam bots.
Please share your thoughts in the comments below.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GCOV - C/C++ Code coverage testing tool]]></title>
    <link href="http://www.chennainerd.in/blog/2014/06/08/gcov-c-slash-c-plus-plus-code-coverage-testing-tool/"/>
    <updated>2014-06-08T11:39:18+05:30</updated>
    <id>http://www.chennainerd.in/blog/2014/06/08/gcov-c-slash-c-plus-plus-code-coverage-testing-tool</id>
    <content type="html"><![CDATA[<h2>What is GCOV</h2>

<ul>
<li>GCC provides GCOV, code coverage testing tool for C/C++ programs.</li>
<li>GCOV identifies the lines of code that got executed while running the program.</li>
<li>It also gives additional information like how many times particular line got executed.</li>
<li>Also provides information about how many possible branches are there in the code and which branch path got executed more.</li>
</ul>


<h2>Use cases</h2>

<h3>Optimization</h3>

<p>GCOV identifies the sections in the code that are heavy executed,
using which we&rsquo;ll be able to <strong>focus on optimizing the parts of the code
which are executed often</strong>.</p>

<h3>Identifying dead code</h3>

<p>Any code that got compiled but never got executed on any possible scenario can be
found using GCOV.  Removing such code can help in <strong>reducing the memory footprint</strong>
of the program.  This can be vital information for programs running on embedded platforms.</p>

<h3>Reliability of testing</h3>

<p>The coverage report can help in <strong>identifying the gaps in testing</strong>.<br/>
The coverage information can be used for writing test cases to exercise
the uncovered area in the code.</p>

<h2>Instrumenting GCOV</h2>

<p>GCOV does not require any change in the code. The only requirement is to have the code built with <strong>-fprofile-arcs</strong> and
<strong>-ftest-coverage</strong>  compiler and linker flags.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yogi@u32:~/gcov_basics$ ls -l
</span><span class='line'>total 8
</span><span class='line'>-rwxrwx--- 1 yogi vboxsf 131 Jun  7 15:13 coverage.c
</span><span class='line'>-rwxrwx--- 1 yogi vboxsf 286 Jun  7 15:56 Makefile
</span><span class='line'>yogi@u32:~/gcov_basics$ cat coverage.c
</span><span class='line'>#include &lt;stdio.h&gt;
</span><span class='line'>int main(int argc, char* argv[])
</span><span class='line'>{
</span><span class='line'>  if (argc == 1)
</span><span class='line'>    printf("True\n");
</span><span class='line'>  else
</span><span class='line'>    printf("False\n");
</span><span class='line'>  return 0;
</span><span class='line'>}
</span><span class='line'>yogi@u32:~/gcov_basics$ cat Makefile
</span><span class='line'>CC=gcc
</span><span class='line'>CFLAGS=-fprofile-arcs -ftest-coverage
</span><span class='line'>LDFLAGS=-fprofile-arcs -ftest-coverage
</span><span class='line'>TARGET=cov
</span><span class='line'>SRC=coverage.c
</span><span class='line'>
</span><span class='line'>all:  obj
</span><span class='line'>  $(CC) $(LDFLAGS) *.o -o $(TARGET)
</span><span class='line'>obj:
</span><span class='line'>  $(CC) $(CFLAGS) -c $(SRC)
</span><span class='line'>clean:
</span><span class='line'>  rm -f $(TARGET) *.html *.gc* *.o
</span><span class='line'>gcov:
</span><span class='line'>  gcovr -r . --html -o coverage.html --html-details</span></code></pre></td></tr></table></div></figure>


<blockquote><p>CFLAGS += -fprofile-arcs -ftest-coverage</p></blockquote>

<p><code>CFLAGS</code> are meant to be used during compilation. This will create <code>.gcno</code> file corresponding to <code>.c/.cpp</code> file</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yogi@u32:~/gcov_basics$ make obj
</span><span class='line'>gcc -fprofile-arcs -ftest-coverage -c coverage.c
</span><span class='line'>yogi@u32:~/gcov_basics$ ls -l
</span><span class='line'>total 16
</span><span class='line'>-rwxrwx--- 1 yogi vboxsf  131 Jun  7 15:13 coverage.c
</span><span class='line'>-rw-rw-r-- 1 yogi yogi    396 Jun  7 15:56 coverage.gcno
</span><span class='line'>-rw-rw-r-- 1 yogi yogi   1824 Jun  7 15:56 coverage.o
</span><span class='line'>-rwxrwx--- 1 yogi vboxsf  286 Jun  7 15:56 Makefile</span></code></pre></td></tr></table></div></figure>


<blockquote><p>LDFLAGS += -fprofile-arcs -ftest-coverage</p></blockquote>

<p><code>LDFLAGS</code> are meant to be used during linking.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yogi@u32:~/gcov_basics$ make
</span><span class='line'>gcc -fprofile-arcs -ftest-coverage -c coverage.c
</span><span class='line'>gcc -fprofile-arcs -ftest-coverage *.o -o cov
</span><span class='line'>yogi@u32:~/gcov_basics$ ls -l
</span><span class='line'>total 36
</span><span class='line'>-rwxrwxr-x 1 yogi yogi   17295 Jun  7 15:56 cov
</span><span class='line'>-rwxrwx--- 1 yogi vboxsf   131 Jun  7 15:13 coverage.c
</span><span class='line'>-rw-rw-r-- 1 yogi yogi     396 Jun  7 15:56 coverage.gcno
</span><span class='line'>-rw-rw-r-- 1 yogi yogi    1824 Jun  7 15:56 coverage.o
</span><span class='line'>-rwxrwx--- 1 yogi vboxsf   286 Jun  7 15:56 Makefile</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yogi@u32:~/gcov_basics$ ./cov
</span><span class='line'>True
</span><span class='line'>yogi@u32:~/gcov_basics$ ls -l
</span><span class='line'>total 40
</span><span class='line'>-rwxrwxr-x 1 yogi yogi   17295 Jun  7 15:56 cov
</span><span class='line'>-rwxrwx--- 1 yogi vboxsf   131 Jun  7 15:13 coverage.c
</span><span class='line'>-rw-rw-r-- 1 yogi yogi     160 Jun  7 15:56 coverage.gcda
</span><span class='line'>-rw-rw-r-- 1 yogi yogi     396 Jun  7 15:56 coverage.gcno
</span><span class='line'>-rw-rw-r-- 1 yogi yogi    1824 Jun  7 15:56 coverage.o
</span><span class='line'>-rwxrwx--- 1 yogi vboxsf   286 Jun  7 15:56 Makefile</span></code></pre></td></tr></table></div></figure>


<p><code>.gcno</code> has static information about the file.</p>

<p><code>.gcda</code> has dynamic information about the file based on the path taken during execution.</p>

<p><code>.gcno</code> and .gcda files together are required to generate the coverage report.</p>

<h2>Generating Report</h2>

<p>Either <strong>gcov</strong> or <strong>gcovr</strong> can be used for generating coverage report.</p>

<p><strong>gcov</strong> utility will be installed as part of <strong>gcc</strong> in most of the Linux distributions.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yogi@u32:~/gcov_basics$ gcov coverage.c
</span><span class='line'>File 'coverage.c'
</span><span class='line'>Lines executed:80.00% of 5
</span><span class='line'>coverage.c:creating 'coverage.c.gcov'
</span><span class='line'>
</span><span class='line'>yogi@u32:~/gcov_basics$ cat coverage.c.gcov
</span><span class='line'>        -:    0:Source:coverage.c
</span><span class='line'>        -:    0:Graph:coverage.gcno
</span><span class='line'>        -:    0:Data:coverage.gcda
</span><span class='line'>        -:    0:Runs:1
</span><span class='line'>        -:    0:Programs:1
</span><span class='line'>        -:    1:#include &lt;stdio.h&gt;
</span><span class='line'>        1:    2:int main(int argc, char* argv[])
</span><span class='line'>        -:    3:{
</span><span class='line'>        1:    4:  if (argc == 1)
</span><span class='line'>        1:    5:      printf("True\n");
</span><span class='line'>        -:    6:  else
</span><span class='line'>    #####:    7:      printf("False\n");
</span><span class='line'>        1:    8:  return 0;
</span><span class='line'>        -:    9:}
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Legend:
</span><span class='line'>  -       indicates not an executable statement
</span><span class='line'>  #####   indicates statement the did not get executed
</span><span class='line'>  1       (or any number) indicates the number of times the statement got executed.</span></code></pre></td></tr></table></div></figure>


<p><strong>gcovr</strong> is a python utility on top of gcov.  It can be installed using pip.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ pip install gcovr</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yogi@u32:~/gcov_basics$ gcovr -r . --html -o coverage.html --html-details</span></code></pre></td></tr></table></div></figure>


<p>The above command will generate coverage report in html format.</p>

<h2>Cool features</h2>

<ul>
<li><p>GCOV takes care of <strong>conditional compilation</strong>.  If a file has 100 lines of code but only 50 lines of code got conditionally compiled using ifdef, then, only 50 lines is taken into account for calculating the code coverage.</p></li>
<li><p>GCOV when enabled on <strong>shared library</strong> and called from two different applications, will consolidate the coverage based on execution of both the applications.</p></li>
<li><p>GCOV works <strong>across reboot</strong>.  The execution information can be collected and consolidated across reboot.</p></li>
<li><p>Running the <strong>same executable multiple instances</strong>, appends execution information to .gcda file.</p></li>
<li><p>Coverage can be <strong>collected from different physical</strong> machines by copying the executable and .gcda files.</p></li>
</ul>


<h2>Pointer to ponder</h2>

<ul>
<li><p>The <strong>number of lines in the file does not match exactly with the number of lines considered for testing coverage</strong>.  One reason is, <strong>not all lines are statement</strong> to be executed. Say, { in a line is not a candidate for execution. The next is could be due to <strong>compiler optimization</strong>.</p></li>
<li><p>The <strong>version of .gcno file and .gcda file should exactly match</strong> to generate report.  If the code was compiled again even without any change, report will not get generated as there is mismatch in the version of .gcno and .gcda files.</p></li>
<li><p>If .gcno file was created again even without changing anything in the code it will not match with .gcda file.</p></li>
<li><p>The program should <strong>gracefully exit</strong> to create/append-to .gcda file.</p></li>
<li><p>If the program is a daemon, better to add <strong>exit(0) in the SIGINT and SIGTERM signal handler.</strong> to do a graceful exit.</p></li>
<li><p>GCOV will try to create <strong>.gcda file in the same folder structure as it was compiled</strong>.
But the problem could be when used on embedded platforms, where the filesystem is mostly readonly.
In this case, <strong>GCOV_PREFIX</strong> enviromental variable can be used.</p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yogi@u32:~/gcov_basics$ make
</span><span class='line'>gcc -fprofile-arcs -ftest-coverage -c coverage.c
</span><span class='line'>gcc -fprofile-arcs -ftest-coverage *.o -o cov
</span><span class='line'>
</span><span class='line'>Note: Copying the executable to /tmp folder
</span><span class='line'>
</span><span class='line'>yogi@u32:~/gcov_basics$ cp cov /tmp/
</span><span class='line'>yogi@u32:~/gcov_basics$ ls -l
</span><span class='line'>total 36
</span><span class='line'>-rwxrwxr-x 1 yogi yogi   17295 Jun  8 07:30 cov
</span><span class='line'>-rwxrwx--- 1 yogi vboxsf   131 Jun  7 15:13 coverage.c
</span><span class='line'>-rw-rw-r-- 1 yogi yogi     396 Jun  8 07:30 coverage.gcno
</span><span class='line'>-rw-rw-r-- 1 yogi yogi    1824 Jun  8 07:30 coverage.o
</span><span class='line'>-rwxrwx--- 1 yogi vboxsf   286 Jun  7 16:32 Makefile
</span><span class='line'>yogi@u32:~/gcov_basics$ cd /tmp/
</span><span class='line'>yogi@u32:/tmp$ ./cov
</span><span class='line'>True
</span><span class='line'>yogi@u32:/tmp$ find . -name "*.gcda"
</span><span class='line'>
</span><span class='line'>Note: gcda file will not get created in the current working directory, instead
</span><span class='line'>will be created in the same folder structure as it got compiled.
</span><span class='line'>
</span><span class='line'>yogi@u32:/tmp$ cd -
</span><span class='line'>/home/yogi/gcov_basics
</span><span class='line'>
</span><span class='line'>Note: gcda file getting created where the code was actually compiled.
</span><span class='line'>
</span><span class='line'>yogi@u32:~/gcov_basics$ ls -l
</span><span class='line'>total 40
</span><span class='line'>-rwxrwxr-x 1 yogi yogi   17295 Jun  8 07:30 cov
</span><span class='line'>-rwxrwx--- 1 yogi vboxsf   131 Jun  7 15:13 coverage.c
</span><span class='line'>-rw-rw-r-- 1 yogi yogi     160 Jun  8 07:30 coverage.gcda
</span><span class='line'>-rw-rw-r-- 1 yogi yogi     396 Jun  8 07:30 coverage.gcno
</span><span class='line'>-rw-rw-r-- 1 yogi yogi    1824 Jun  8 07:30 coverage.o
</span><span class='line'>-rwxrwx--- 1 yogi vboxsf   286 Jun  7 16:32 Makefile
</span><span class='line'>yogi@u32:~/gcov_basics$
</span><span class='line'>yogi@u32:~/gcov_basics$ export GCOV_PREFIX=/tmp
</span><span class='line'>yogi@u32:~/gcov_basics$ rm coverage.gcda
</span><span class='line'>yogi@u32:~/gcov_basics$ cd -
</span><span class='line'>/tmp
</span><span class='line'>yogi@u32:/tmp$ ./cov
</span><span class='line'>True
</span><span class='line'>
</span><span class='line'>Note: By setting GCOV_PREFIX environmental variable we'll be able to direct
</span><span class='line'>the files to a particular base folder.
</span><span class='line'>
</span><span class='line'>yogi@u32:/tmp$ ls -l /tmp/home/yogi/gcov_basics/coverage.gcda
</span><span class='line'>-rw-rw-r-- 1 yogi yogi 160 Jun  8 07:31 /tmp/home/yogi/gcov_basics/coverage.gcda</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>GCOV_PREFIX_STRIP</strong> environmental variable can be handy when we are not interested in complete folder structure but to remove certain part of it.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yogi@u32:/tmp$ export GCOV_PREFIX=/tmp
</span><span class='line'>yogi@u32:/tmp$ export GCOV_PREFIX_STRIP=2
</span><span class='line'>yogi@u32:/tmp$ ./cov
</span><span class='line'>True
</span><span class='line'>
</span><span class='line'>Note:  Earlier .gcda file was getting created in /tmp/home/yogi/gcov_basics/ folder.
</span><span class='line'>Now by exporting GCOV_PREFIX_STRIP=2 environmental variable, will strip two levels - /home/yogi/ folder
</span><span class='line'>is stripped off and .gcda file will get create in /tmp/gcov_basics/
</span><span class='line'>
</span><span class='line'>yogi@u32:/tmp$ ls -l /tmp/gcov_basics/coverage.gcda
</span><span class='line'>-rw-rw-r-- 1 yogi yogi 160 Jun  8 07:44 /tmp/gcov_basics/coverage.gcda
</span></code></pre></td></tr></table></div></figure>


<h2>FAQs</h2>

<p>1.undefined reference to <code>__gcov_init</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yogi@u32:~/gcov_basics$ make
</span><span class='line'>gcc -fprofile-arcs -ftest-coverage -c coverage.c
</span><span class='line'>gcc  *.o -o cov
</span><span class='line'>coverage.o: In function `_GLOBAL__sub_I_65535_0_main':
</span><span class='line'>coverage.c:(.text+0xae): undefined reference to `__gcov_init'
</span><span class='line'>coverage.o:(.data+0x24): undefined reference to `__gcov_merge_add'
</span><span class='line'>collect2: ld returned 1 exit status
</span><span class='line'>make: *** [all] Error 1</span></code></pre></td></tr></table></div></figure>


<blockquote><p>The reason for this is, <strong>-fprofile-arcs</strong> and <strong>-ftest-coverage</strong> where used during compilation(in CFLAGS), but missed during linking (in LDFLAGS).</p></blockquote>

<p>2.<code>.gcda</code> file not getting created as the result of execution.</p>

<blockquote><p>Check if gcov symbols are there in the binary using <strong>strings</strong> or <strong>nm</strong> command.</p>

<p><strong>ldd</strong> command <strong>will not help</strong> because there will not be any extra libraries linked specifically for gcov.</p></blockquote>

<p>Binary <strong>without gcov symbols</strong> will look like the one shown below.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yogi@u32:~/gcov_basics$ strings cov
</span><span class='line'>/lib/ld-linux.so.2
</span><span class='line'>__gmon_start__
</span><span class='line'>libc.so.6
</span><span class='line'>_IO_stdin_used
</span><span class='line'>puts
</span><span class='line'>__libc_start_main
</span><span class='line'>GLIBC_2.0
</span><span class='line'>PTRh
</span><span class='line'>UWVS
</span><span class='line'>[^_]
</span><span class='line'>True
</span><span class='line'>False
</span><span class='line'>;*2$"</span></code></pre></td></tr></table></div></figure>


<p>Binary <strong>with gcov symbols</strong> will look like the one shown below.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yogi@u32:~/gcov_basics$ strings cov
</span><span class='line'>/lib/ld-linux.so.2
</span><span class='line'>__gmon_start__
</span><span class='line'>libc.so.6
</span><span class='line'>_IO_stdin_used
</span><span class='line'>...
</span><span class='line'>[^_]
</span><span class='line'>True
</span><span class='line'>False
</span><span class='line'>/home/yogi/gcov_basics/coverage.gcda
</span><span class='line'>profiling:%s:Version mismatch - expected %.4s got %.4s
</span><span class='line'>profiling:%s:Overflow merging
</span><span class='line'>profiling:%s:Overflow writing
</span><span class='line'>profiling:%s:Cannot create directory
</span><span class='line'>profiling:%s:Not a gcov data file
</span><span class='line'>profiling:%s:Merge mismatch for %s
</span><span class='line'>profiling:%s:Invocation mismatch - some data files may have been removed%s
</span><span class='line'>function
</span><span class='line'>summaries
</span><span class='line'>profiling:%s:Error merging
</span><span class='line'>profiling:%s:Error writing
</span><span class='line'>GCOV_PREFIX_STRIP
</span><span class='line'>GCOV_PREFIX
</span><span class='line'>profiling:%s:Skip
</span><span class='line'>profiling:%s:Cannot open
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<blockquote><p>The reason for this could be <strong>-fprofile-arcs and -ftest-coverage CFLAGS</strong> were missed during compilation.</p></blockquote>

<p>3.gcov symbols are seen in the binary but still .gcda file is not getting created.</p>

<blockquote><p>The reason could be the program did not do a graceful exit.</p></blockquote>

<p> We’d love to hear more about your experiences with c/c++ code coverage.
 Please share your thoughts in the comments below.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deployed my static site before my friend finished peeing]]></title>
    <link href="http://www.chennainerd.in/blog/2014/06/07/deployed-my-static-site-before-my-friend-finished-peeing/"/>
    <updated>2014-06-07T16:50:50+05:30</updated>
    <id>http://www.chennainerd.in/blog/2014/06/07/deployed-my-static-site-before-my-friend-finished-peeing</id>
    <content type="html"><![CDATA[<p>Building and Deploying static sites becomes easier and simpler than never before.
I see lot of people buying servers and setting up <code>cdn</code> for deploying
sites which may be company sites, personal sites or blogs. I also see people
deploying the sites in S3 which is quiter easier than setting up the server.</p>

<p>But there is also way to deploy your static sites simpler than above methods.
It is <a href="http://www.divshot.com/">Divshot</a> Hosting.
I deployed my personal blog before my friend finished peeing.
Lets see how i did it.</p>

<h3>Signup for Divshot</h3>

<p>Go to <a href="http://www.divshot.com">http://www.divshot.com</a> and Signup for the service.</p>

<h3>Install Divshot client tool</h3>

<pre><code>$ npm install -g divshot-cli
</code></pre>

<h3>Login to Divshot</h3>

<pre><code>$ divshot login
</code></pre>

<h3>Create your app directory and place your static files</h3>

<pre><code>$ mkdir app-name
$ cd app-name
</code></pre>

<p>Lets say you are going to have your static assets inside <code>public</code> folder as below</p>

<pre><code>app-name/
  public/
    css/
      main.css
    js/
      main.js
    index.html
    about.html
    contact.html
</code></pre>

<h3>Create divshot configuration file</h3>

<p>Once you&rsquo;re in your new application&rsquo;s directory, you can initialize a new Divshot
application by using the <code>divshot init</code> command. This will walk you step by step
through some basic configuration options for your app, then create a <code>divshot.json</code>
file and provision your new app.</p>

<pre><code>$ divshot init
</code></pre>

<p>It will ask you following information</p>

<pre><code>name: (app-name) app-name
root directory: (current) public
clean urls: (y/n) y
error page: (error.html)
Would you like to create a Divshot.io app from this app?: (y/n) y
Creating app ...
Success: app-name has been created
Success: App initiated
</code></pre>

<h3>Deploy just like git push</h3>

<p>To deploy to the development environment, all you need to do is run:</p>

<pre><code>$ divshot push
</code></pre>

<p>Once your app is deployed successfully,
You can view your app at: <a href="http://development.app-name.divshot.io">http://development.app-name.divshot.io</a></p>

<p>You can also deploy in production by</p>

<pre><code>$ divshot push production

(or)

$ divshot promote development production
</code></pre>

<p>Once you app is deployed in <code>production</code> environment, You can view your app at: <a href="http://app-name.divshot.io">http://app-name.divshot.io</a></p>

<h3>Setting your custom domain</h3>

<p>Once your application is ready, you can set custom domain configuration in divshot.</p>

<pre><code>$ divshot domains:add www.myapp.com
</code></pre>

<p>You also need to set <code>CNAME</code> record with your DNS provider.
Refer <a href="http://docs.divshot.com/">Divshot Documentation</a> for more details.</p>

<p>Happy Hosting and Have a nice day.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backup of Openshift Application]]></title>
    <link href="http://www.chennainerd.in/blog/2014/06/05/backup-of-openshift-application/"/>
    <updated>2014-06-05T21:43:40+05:30</updated>
    <id>http://www.chennainerd.in/blog/2014/06/05/backup-of-openshift-application</id>
    <content type="html"><![CDATA[<p>You may want to schedule backups of your <code>openshift</code> application daily, weekly, or monthly.
It can be done in two simple steps</p>

<h3>1.Create a backup application</h3>

<p>First we need to spin up a backup application</p>

<pre><code>rhc app create osbs https://raw.githubusercontent.com/wshearn/openshift-cartridge-osbs/master/metadata/manifest.yml http://tinyurl.com/OpenShiftRedisCart cron --no-git
</code></pre>

<p>Once it is created, it will give your username and password. Please make a note of it.</p>

<h3>2.Create a backup cartridge</h3>

<p>Then you have to add backup cartridge to the application for which you want to take backup.</p>

<pre><code>rhc cartridge add -a &lt;application to backup&gt; -c https://raw.githubusercontent.com/wshearn/openshift-cartridge-osbs-client/master/metadata/manifest.yml
</code></pre>

<p>Once it is done, you can login with username and password(that you got in previous step) in the following URL and schedule the backups.</p>

<pre><code> http://osbs-&lt;your_namespace&gt;.rhcloud.com
</code></pre>

<p>Hope it helps. Have a nice day.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running Python script from Cron job in Openshift]]></title>
    <link href="http://www.chennainerd.in/blog/2014/05/29/running-python-script-from-cron-job-in-openshift/"/>
    <updated>2014-05-29T11:47:37+05:30</updated>
    <id>http://www.chennainerd.in/blog/2014/05/29/running-python-script-from-cron-job-in-openshift</id>
    <content type="html"><![CDATA[<p><code>Openshift</code> is one of the amazing PAAS service where you can deploy
your application in a very simple steps. It also provides Free gear for developer.
So you can deploy your hack without providing credit card information for zero dollar.</p>

<p>Our application stack is Python Flask, MongoDB, Angular.js and some CRON scripts.
We wanted to deploy our application in some PAAS which has CRON support.</p>

<p>First We choose <code>Google App Engine</code> since it supports CRON jobs.
Unfortunately Google App Engine does not allow us to connect external MongoDB
database like MongoHQ and MongoLab. Only solution is to create MongoDB instance
in <code>Google Compute Engine</code>. It is not feasible for us.</p>

<p>We also play with <code>Heroku</code> which does not work well for us.
Finally we move to <code>Openshift</code> to deploy our application. Following are the
steps to configure cron scripts in <code>Openshift</code>.</p>

<ul>
<li>Add CRON cartridge in your application</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rhc cartridge add cron-1.4 -a application_name</span></code></pre></td></tr></table></div></figure>


<p><code>rhc</code> is a command line tool to control the <code>Openshift</code> application.</p>

<ul>
<li>Place your cron scripts to your application&rsquo;s <code>.openshift/cron/{minutely,hourly,daily,weekly,monthly}/</code> folder. Here is the sample python scripts.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/bash
</span><span class='line'>
</span><span class='line'>echo "************ Cronny Started ***************"
</span><span class='line'>date &gt;&gt; ${OPENSHIFT_DATA_DIR}/ticktock-start.log
</span><span class='line'>
</span><span class='line'>source ${OPENSHIFT_HOMEDIR}/python/virtenv/bin/activate
</span><span class='line'>python ${OPENSHIFT_REPO_DIR}/wsgi/crawler.py
</span><span class='line'>
</span><span class='line'>echo "************ Cronny Executed ***************"
</span><span class='line'>date &gt;&gt; ${OPENSHIFT_DATA_DIR}/ticktock-end.log</span></code></pre></td></tr></table></div></figure>


<p>And that&rsquo;s all there is to it! Have a nice day.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generators in Python]]></title>
    <link href="http://www.chennainerd.in/blog/2014/05/19/generators-in-python/"/>
    <updated>2014-05-19T11:01:58+05:30</updated>
    <id>http://www.chennainerd.in/blog/2014/05/19/generators-in-python</id>
    <content type="html"><![CDATA[<p>One of the few obscure feature of python (for the beginners) is <strong>Generators</strong>.
In this post I would like to share few naive questions I had about generators
and the answers I got after understanding them.</p>

<blockquote><p><strong>Question 1:</strong> Are generators something like static variables in C?  Say, generateFibonacciNumber() is a generator.   First time I call generateFibonacciNumber() and iterate upto value 5, the next time I call  generateFibonacciNumber() will it start returning from value 8 when iterated?</p></blockquote>

<p>This could sound like most dumb question on earth, but honestly I had this
question having come from C background.</p>

<p><strong>Answer:</strong>  No. Generators should not be confused with static variables in C.
Every time a generator is called it will return a generator object and each has
their own state variables.  So iterating one generator will not affect the other.</p>

<blockquote><p><strong>Question 2:</strong> Creating multiple generators holding their reference and not iterating through them could potentially lead to memory exhaustion, correct?</p></blockquote>

<p>Phew.  Yet another dumb question.</p>

<p><strong>Answer:</strong> Obviously if you are going to hold the reference it is going to eat memory.
But, that is not the problem of generators.  Let&rsquo;s take for example, to process
a million lines of code we use a <em>generator</em> and a <em>normal function</em>.  At any point
of time single generator object will hold only state variables and not the memory
needed to hold all million lines.  But holding the value returned by a normal
function is like holding million lines in the memory.  Compare holding multiple
instances of state variables and multiple instance of million lines &ndash; the answer is obvious.</p>

<h3>So, what is actually is a Generator?</h3>

<p>To understand generator we&rsquo;ll have to understand what is <strong>iterator</strong> in python.</p>

<p>In simple terms, <strong>iterator</strong> is a object having two methods <code>__iter__()</code> and <code>next()</code>.
When iterators are using along with looping constructs like <code>for</code>, the <code>__iter__</code> and
<code>next</code> methods are called implicitly.</p>

<p>You can find more information on iterators <a href="https://docs.python.org/2/library/stdtypes.html#iterator-types">here</a>.</p>

<blockquote><p>__iter__() : Returing itself</p>

<p>next()  : Returning next item, or <strong>StopIteration</strong> exception on no further items.</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Iterator</span><span class="p">():</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">__iter__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="bp">self</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">next</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">:</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>      <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">i</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>      <span class="k">raise</span> <span class="ne">StopIteration</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span><span class='line'>  <span class="n">iterator</span> <span class="o">=</span> <span class="n">Iterator</span><span class="p">()</span>
</span><span class='line'>  <span class="k">print</span> <span class="nb">type</span><span class="p">(</span><span class="n">iterator</span><span class="p">)</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">iterator</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">i</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>  <span class="n">main</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Executing this code will give us output as shown below,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;instance&#39;</span><span class="o">&gt;</span>
</span><span class='line'><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span> <span class="mi">7</span> <span class="mi">8</span> <span class="mi">9</span> <span class="mi">10</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Generator</strong> is a special iterator.  We will not have to write a class with
these methods, instead <code>yield</code> keyword can do all the <strong>magic</strong> for us.</p>

<p>Now, let us rewrite the above code with generator.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">generator</span><span class="p">():</span>
</span><span class='line'>  <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">:</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">yield</span> <span class="n">i</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span><span class='line'>  <span class="n">gen</span> <span class="o">=</span> <span class="n">generator</span><span class="p">()</span>
</span><span class='line'>  <span class="k">print</span> <span class="nb">type</span><span class="p">(</span><span class="n">gen</span><span class="p">)</span>
</span><span class='line'>  <span class="k">print</span> <span class="nb">dir</span><span class="p">(</span><span class="n">gen</span><span class="p">)</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">gen</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">i</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>  <span class="n">main</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Executing this code will give us output as shown below,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;</span><span class="nb">type</span> <span class="s">&#39;generator&#39;</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;__class__&#39;</span><span class="p">,</span> <span class="s">&#39;__delattr__&#39;</span><span class="p">,</span> <span class="s">&#39;__doc__&#39;</span><span class="p">,</span> <span class="s">&#39;__format__&#39;</span><span class="p">,</span> <span class="s">&#39;__getattribute__&#39;</span><span class="p">,</span> <span class="s">&#39;__hash__&#39;</span><span class="p">,</span> <span class="s">&#39;__init__&#39;</span><span class="p">,</span> <span class="s">&#39;__iter__&#39;</span><span class="p">,</span> <span class="s">&#39;__name__&#39;</span><span class="p">,</span> <span class="s">&#39;__new__&#39;</span><span class="p">,</span> <span class="s">&#39;__reduce__&#39;</span><span class="p">,</span> <span class="s">&#39;__reduce_ex__&#39;</span><span class="p">,</span> <span class="s">&#39;__repr__&#39;</span><span class="p">,</span> <span class="s">&#39;__setattr__&#39;</span><span class="p">,</span> <span class="s">&#39;__sizeof__&#39;</span><span class="p">,</span> <span class="s">&#39;__str__&#39;</span><span class="p">,</span> <span class="s">&#39;__subclasshook__&#39;</span><span class="p">,</span> <span class="s">&#39;close&#39;</span><span class="p">,</span> <span class="s">&#39;gi_code&#39;</span><span class="p">,</span> <span class="s">&#39;gi_frame&#39;</span><span class="p">,</span> <span class="s">&#39;gi_running&#39;</span><span class="p">,</span> <span class="s">&#39;next&#39;</span><span class="p">,</span> <span class="s">&#39;send&#39;</span><span class="p">,</span> <span class="s">&#39;throw&#39;</span><span class="p">]</span>
</span><span class='line'><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span> <span class="mi">7</span> <span class="mi">8</span> <span class="mi">9</span> <span class="mi">10</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Is that all?  Is generator just another method to create iterator?</p>

<p>But according to the zen of python,</p>

<p><em>&ldquo;There should be one&mdash; and preferably only one &mdash;obvious way to do it.&rdquo;</em></p></blockquote>

<p>Hey look, <code>dir(generator)</code> is giving something more than what we would expect from a <code>dir(function)</code>.</p>

<h3>Generator is more than just an iterator</h3>

<p>Let us now dwell deep into generator, for which we&rsquo;ll have to understand <code>yield</code> keyword.</p>

<p><code>yield</code> as just the literal meaning &ndash; relinquishes the control temporarily.</p>

<p>Whenever a generator function is called, the actual code
inside the function does not get executed.</p>

<p>For example, the same code without iterating through items of generator.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">generator</span><span class="p">():</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&#39;First line of generator&#39;</span>
</span><span class='line'>  <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">:</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">yield</span> <span class="n">i</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&#39;Before calling generator&#39;</span>
</span><span class='line'>  <span class="n">gen</span> <span class="o">=</span> <span class="n">generator</span><span class="p">()</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&#39;After calling generator&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>  <span class="n">main</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Output of this code will look like,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">Before</span> <span class="n">calling</span> <span class="n">generator</span>
</span><span class='line'><span class="n">After</span> <span class="n">calling</span> <span class="n">generator</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can notice something.  <em>&ldquo;First line of generator&rdquo;</em> is
not printed when generator is invoked.</p>

<blockquote><p>This is how, generator is different from other functions.  Calling a generator
function does not execute any code in the function, instead returns a generator
object.</p>

<p>So, when does actual code gets executed?</p>

<p><strong>The actual code gets executed when the next() method is called.</strong></p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">generator</span><span class="p">():</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&#39;In generator() first line&#39;</span>
</span><span class='line'>  <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">:</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;In generator() before yield&#39;</span>
</span><span class='line'>    <span class="k">yield</span> <span class="n">i</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;In generator() after yield&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&#39;In main() before calling generator()&#39;</span>
</span><span class='line'>  <span class="n">gen</span> <span class="o">=</span> <span class="n">generator</span><span class="p">()</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&#39;In main() after calling generator()&#39;</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&#39;In main() before calling next()&#39;</span>
</span><span class='line'>  <span class="n">gen</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&#39;In main() after calling next()&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>  <span class="n">main</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Output of this code will look like this,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">In</span> <span class="n">main</span><span class="p">()</span> <span class="n">before</span> <span class="n">calling</span> <span class="n">generator</span><span class="p">()</span>
</span><span class='line'><span class="n">In</span> <span class="n">main</span><span class="p">()</span> <span class="n">after</span> <span class="n">calling</span> <span class="n">generator</span><span class="p">()</span>
</span><span class='line'><span class="n">In</span> <span class="n">main</span><span class="p">()</span> <span class="n">before</span> <span class="n">calling</span> <span class="nb">next</span><span class="p">()</span>
</span><span class='line'><span class="n">In</span> <span class="n">generator</span><span class="p">()</span> <span class="n">first</span> <span class="n">line</span>
</span><span class='line'><span class="n">In</span> <span class="n">generator</span><span class="p">()</span> <span class="n">before</span> <span class="k">yield</span>
</span><span class='line'><span class="n">In</span> <span class="n">main</span><span class="p">()</span> <span class="n">after</span> <span class="n">calling</span> <span class="nb">next</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>It is clear from the example above, that the code inside generator
actually gets executed when next() method is called.</p>

<p>One more thing to be noticed here is, the last line of generator
<strong>&lsquo;In generator() after yield&rsquo;</strong> is not getting printed.</p>

<p>The execution resumes from this point when next() method of the generator
object is called the next time.</p></blockquote>

<p>The code snippet below explains this control flow.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">generator</span><span class="p">():</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&#39;In generator() first line&#39;</span>
</span><span class='line'>  <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">:</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;In generator() before yield&#39;</span>
</span><span class='line'>    <span class="k">yield</span> <span class="n">i</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;In generator() after yield&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&#39;In main() before calling generator()&#39;</span>
</span><span class='line'>  <span class="n">gen</span> <span class="o">=</span> <span class="n">generator</span><span class="p">()</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&#39;In main() after calling generator()&#39;</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&#39;In main() before calling next()&#39;</span>
</span><span class='line'>  <span class="n">gen</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&#39;In main() after calling next()&#39;</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&#39;In main() before calling next() second time&#39;</span>
</span><span class='line'>  <span class="n">gen</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&#39;In main() after calling next() second time&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>  <span class="n">main</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Output of this code will be,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">In</span> <span class="n">main</span><span class="p">()</span> <span class="n">before</span> <span class="n">calling</span> <span class="n">generator</span><span class="p">()</span>
</span><span class='line'><span class="n">In</span> <span class="n">main</span><span class="p">()</span> <span class="n">after</span> <span class="n">calling</span> <span class="n">generator</span><span class="p">()</span>
</span><span class='line'><span class="n">In</span> <span class="n">main</span><span class="p">()</span> <span class="n">before</span> <span class="n">calling</span> <span class="nb">next</span><span class="p">()</span>
</span><span class='line'><span class="n">In</span> <span class="n">generator</span><span class="p">()</span> <span class="n">first</span> <span class="n">line</span>
</span><span class='line'><span class="n">In</span> <span class="n">generator</span><span class="p">()</span> <span class="n">before</span> <span class="k">yield</span>
</span><span class='line'><span class="n">In</span> <span class="n">main</span><span class="p">()</span> <span class="n">after</span> <span class="n">calling</span> <span class="nb">next</span><span class="p">()</span>
</span><span class='line'><span class="n">In</span> <span class="n">main</span><span class="p">()</span> <span class="n">before</span> <span class="n">calling</span> <span class="nb">next</span><span class="p">()</span> <span class="n">second</span> <span class="n">time</span>
</span><span class='line'><span class="n">In</span> <span class="n">generator</span><span class="p">()</span> <span class="n">after</span> <span class="k">yield</span>
</span><span class='line'><span class="n">In</span> <span class="n">generator</span><span class="p">()</span> <span class="n">before</span> <span class="k">yield</span>
</span><span class='line'><span class="n">In</span> <span class="n">main</span><span class="p">()</span> <span class="n">after</span> <span class="n">calling</span> <span class="nb">next</span><span class="p">()</span> <span class="n">second</span> <span class="n">time</span>
</span></code></pre></td></tr></table></div></figure>


<h3>So, when to use generator and when to use iterable?</h3>

<p>Any iterable can be replaced with a generator but converse is not true.</p>

<p>Generators are preferred for two reasons,</p>

<ol>
<li>When dealing with large sequence</li>
<li>When the end point of the sequence is not known beforehand</li>
</ol>


<p>Thats all about generators in Python.  Happy hacking.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Must watch videos for Entrepreneurs from Guy Kawasaki]]></title>
    <link href="http://www.chennainerd.in/blog/2014/05/10/must-watch-videos-for-entrepreneurs-from-guy-kawasaki/"/>
    <updated>2014-05-10T11:24:24+05:30</updated>
    <id>http://www.chennainerd.in/blog/2014/05/10/must-watch-videos-for-entrepreneurs-from-guy-kawasaki</id>
    <content type="html"><![CDATA[<p>I recently watched videos about entrepreneurship and startup from <strong>Guy Kawasaki</strong>.
These videos are fun to watch and so must lessons to learn.</p>

<h3>Video 1: Guy Kawasaki: The Top 10 Mistakes of Entrepreneurs</h3>

<iframe width="420" height="315" src="http://www.youtube.com/embed/HHjgK6p4nrw" frameborder="0" allowfullscreen></iframe>


<h3>Video 2: Guy Kawasaki &ldquo;The Art of the Start&rdquo; @ TiECon 2006</h3>

<iframe width="420" height="315" src="http://www.youtube.com/embed/jSlwuafyUUo" frameborder="0" allowfullscreen></iframe>


<h3>Video 3: 12 Lessons Steve Jobs Taught Guy Kawasaki</h3>

<iframe width="420" height="315" src="http://www.youtube.com/embed/DR_wX0EwOMM" frameborder="0" allowfullscreen></iframe>


<p>Hope you will enjoy the video and Have a nice day.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Want to automate things? Have a glance on Sikuli!]]></title>
    <link href="http://www.chennainerd.in/blog/2014/03/31/want-to-automate-things-have-a-glance-on-sikuli/"/>
    <updated>2014-03-31T15:14:47+05:30</updated>
    <id>http://www.chennainerd.in/blog/2014/03/31/want-to-automate-things-have-a-glance-on-sikuli</id>
    <content type="html"><![CDATA[<p>You want to automate some repetitive tasks in daily usage of applications or
web pages, games or IT systems and networks etc., and you do not
have adequate tools in hand.</p>

<p>Then you are at the right place now. Just give a try for Sikuli, a simple tool
for GUI automation. Sikuli can automate any computer operations based on screen shots.</p>

<h2>Sikuli Installation steps</h2>

<h4>Step 1: Download the following from <a href="https://launchpad.net/sikuli/+download">https://launchpad.net/sikuli/+download</a></h4>

<pre><code>Sikuli-1.0.1-Supplemental-LinuxVisionProxy.zip (md5)
sikuli-setup.jar (md5)
</code></pre>

<h4>Step 2: Install dependencies</h4>

<p>Ubuntu users: Install the below packages (Dependencies for Sikuli)</p>

<pre><code>sudo apt-get install openjdk-7-jdk
sudo apt-get install libopencv-dev
sudo apt-get install libtesseract-dev
</code></pre>

<p>Unzip the .zip file and follow the readme steps to build a new <code>libvisionproxy.so</code> file.</p>

<p>Windows users: Install java jre 7</p>

<h4>Step 3: Install Sikuli using the jar file.</h4>

<p>Run the <code>Sikuli-setup.jar</code> by setting the executable bit if not set
on it and use the command:</p>

<pre><code>java -jar sikuli-setup.jar
</code></pre>

<p>Ubuntu users should replace the newly generated <code>libvisionproxy.so</code> with the
existing one in <code>&lt;Sikuli_installed_folder&gt;/libs/</code> location.</p>

<h4>Step 4: Launch the Sikuli IDE using the command.</h4>

<pre><code>cd &lt;Sikuli_installed_folder&gt;
runIDE.cmd (for windows users)
./runIDE (for Ubuntu users)
</code></pre>

<h4>Step 5: Run the Sikuli tests from command line using the command:</h4>

<pre><code>runIDE.cmd –r &lt;sikuli_test_name.sikuli&gt;    (for windows users)
./runIDE –r &lt;sikuli_test_name.sikuli&gt;      (for Ubuntu users)
</code></pre>

<h3>Sample Sikuli code snippet:</h3>

<p>Say you want to automate the following: launch a notepad, type some text and save it.</p>

<p>Below is the sample code written in Sikuli IDE.</p>

<p><img src="http://i.imgur.com/qtvxGOA.png" alt="Sikuli" /></p>

<p>The same code snippet trying to open a diffent app say gedit, should work seamlessly in Ubuntu.
For web browser based automation, wait for my next blog on Selenium.</p>

<p>Happy automation folks !!!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I am a C programmer. Why i love AngularJS?]]></title>
    <link href="http://www.chennainerd.in/blog/2014/02/22/i-am-a-c-programmer-why-i-love-angularjs/"/>
    <updated>2014-02-22T19:01:42+05:30</updated>
    <id>http://www.chennainerd.in/blog/2014/02/22/i-am-a-c-programmer-why-i-love-angularjs</id>
    <content type="html"><![CDATA[<p>The intended audience for this blog are not the people who have profound knowledge in HTML and Javascript.  This is only for those who are in inertia to experiment with web development.  Also, please be aware that this is not beginner&rsquo;s tutorial for AngularJS.</p>

<p>I have this habit of trying some web related stuff rarely once in a year.  Couple of years back on a fine morning started to play with jQuery and was impressed by its power.  But at the end of the day thought there is so much to APIs to remember or at least be aware of. Then decided, it&rsquo;s not going to work out for me and that was the last time I tried anything on the web.</p>

<p>Last week I had a chance to play with AngularJS and my immediate reaction was &ldquo;WoW!!!&rdquo;. After my first encounter with AngularJS I thought this is not going to be just one day affair and fell in love with AngularJS. During the course of this blog I&rsquo;ll walk you through the features of AngularJS which impressed me.</p>

<h4>Framework and library:</h4>

<p>First of all, AngularJS is not library like jQuery, it is a framework.  So there is no onus of remembering the APIs.</p>

<h4>Empowering HTML:</h4>

<p>HTML was born when the intention of web was only to display static content.  As the name suggests that is only a markup language &ndash; nothing wrong, nobody to blame. The people who designed that had only scoped for that.  But now, the web is not that simple.
And being a C programmer I wished if there is anyway to add if condition, loop, block scope in HTML.  AngularJS comes as a prosthetic limb for the handicapped HTML.</p>

<p>To display an element only when a condition is met (i.e.,) having a if construct. This is possible in AngularJS using <code>ng-if</code> or <code>ng-show</code> directive.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;input type="text" ng-model="customer.name" ng-if="customer.edit"&gt;
</span><span class='line'>&lt;span ng-bind="customer.name" ng-if="!customer.edit"&gt;&lt;/span&gt;</span></code></pre></td></tr></table></div></figure>


<p>If customer.edit is set true, customer.name will be displayed in text box, else will be displayed in span.</p>

<p>To iterate through a array of items and create a <code>&lt;ul&gt;</code> or <code>&lt;li&gt;</code> or even populate a
<code>&lt;table&gt;</code>.  <code>ng-repeat</code> directive does the job.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;table&gt;
</span><span class='line'>    &lt;thead&gt;
</span><span class='line'>        &lt;tr&gt;
</span><span class='line'>            &lt;th&gt;Name&lt;/th&gt;
</span><span class='line'>            &lt;th&gt;Amount&lt;/th&gt;
</span><span class='line'>            &lt;th&gt;ROI&lt;/th&gt;
</span><span class='line'>        &lt;/tr&gt;
</span><span class='line'>    &lt;/thead&gt;
</span><span class='line'>    &lt;tbody&gt;
</span><span class='line'>        &lt;tr ng-repeat="customer in customers"&gt;
</span><span class='line'>            &lt;td ng-bind="customer.name"&gt;&lt;/td&gt;
</span><span class='line'>            &lt;td ng-bind="customer.amount"&gt;&lt;/td&gt;
</span><span class='line'>            &lt;td ng-bind="customer.roi"&gt;&lt;/td&gt;
</span><span class='line'>        &lt;/tr&gt;
</span><span class='line'>    &lt;/tbody&gt;
</span><span class='line'>&lt;/table&gt;</span></code></pre></td></tr></table></div></figure>


<p>To restrict the scope of variables and functions within a block, <code>ng-controller</code> can be used.
Though the use of <code>ng-controller</code> is more than that.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;script&gt;
</span><span class='line'>    angular.module("bank", []).
</span><span class='line'>    controller('BankController',
</span><span class='line'>        function BankController($scope) {
</span><span class='line'>            $scope.customers = [name:'kansamy', amount:'1000', roi:'9', edit:0}, {name:'munsamy', amount:'300', roi:'2', edit:0}];
</span><span class='line'>            $scope.customer = {name:'', amount:'', roi:'', edit:0};
</span><span class='line'>        });
</span><span class='line'>&lt;script&gt;
</span><span class='line'>&lt;body ng-app="bank" ng-controller="BankController"&gt;
</span><span class='line'>...
</span><span class='line'>&lt;/body&gt;</span></code></pre></td></tr></table></div></figure>


<p>The scope of bank controller is throughout the <code>&lt;body&gt;</code>.
This scope can be restricted to any <code>&lt;div&gt;</code> or any other element by setting
<code>ng-controller</code> accordingly. <code>$scope</code> variable has a special meaning mapping to
the scope of the controller.</p>

<p>There is much more talk to about AngularJS &ndash; what I have captured here is only the picture of love at first sight.</p>

<p>I have hosted a simple no use application exercising these features of AngularJS
<a href="https://brilliant-fire-1717.firebaseapp.com/bank.html">https://brilliant-fire-1717.firebaseapp.com/bank.html</a></p>

<p>No wonder, these features can one day become integral part of HTML.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Best Places to learn programming]]></title>
    <link href="http://www.chennainerd.in/blog/2014/02/22/best-places-to-learn-programming/"/>
    <updated>2014-02-22T17:09:55+05:30</updated>
    <id>http://www.chennainerd.in/blog/2014/02/22/best-places-to-learn-programming</id>
    <content type="html"><![CDATA[<p>Everyday, we hear news of acquisition of tech companies for million or billion dollars.
It creates a lot of excitement among programmers and even non programmers.
So everybody wanted to learn programming and even programmer from C, Java background
wanted to learn iOS, Android app development. Big question: Should i need
to go college to learn programming? Not anymore, we have lot of online companies
offering courses to train you like Ninja. Following are few places where you can learn to code.</p>

<h3><a href="http://codeschool.com/">Code School</a></h3>

<p><a href="http://codeschool.com/">Code School</a> teaches web technologies in the comfort of
your browser with video lessons, coding challenges, and screencasts. From my experience,
it is one of best places to learn web and mobile application development.
It costs <code>$29</code> per month. But it worths it.</p>

<h3><a href="http://www.codecademy.com/">Codecademy</a></h3>

<p>At Codecademy, you can learn to code in JavaScript, HTML and CSS, Python and Ruby.
Codecademy is <code>Free</code>. It is one of the most famous website to teach you to code interactively,</p>

<h3><a href="https://teamtreehouse.com/">Treehouse</a></h3>

<p>Treehouse can prepare you for a developer gig, even if you’ve got no experience.
A helpful iPad app also makes it easy to learn on the go.  Treehouse courses
are more project-oriented than language-oriented, so they are perfect for novice
programmer with a planned purpose, such as building a website, or an application.</p>

<p>It has two pricing plan. 1. <code>Basic($25)</code>  2. <code>Pro($49)</code> per month</p>

<h3><a href="https://www.udacity.com/">Udacity</a></h3>

<p>Udacity aims to bring college courses online specially Computer courses.
Udacity claims that online courses are rigorous and may even make you sweat.
Tackling projects built by tech leaders like Google, AT&amp;T, and Intuit,
you’ll stretch yourself and learn new and relevant skills.</p>

<h3><a href="https://www.learnstreet.com/">LearnStreet</a></h3>

<p>If you are that kind of personnel who do not fancy playful design and prefer to
deal with cold hard codes, LearnStreet is probably your thing. It currently offers
JavaScript, Python and Ruby courses at beginner level.</p>

<h3><a href="http://www.codehs.com/">codehs</a></h3>

<p>At this point all websites you read here are mainly dedicated to web development
and computer science, but CodeHS is one with simple and fun game programming lessons
that involve problem solving, JavaScript, animation, data structures,
game design and puzzle challenges.</p>

<h3><a href="https://www.coursera.org/">Coursera</a></h3>

<p>Coursera aims to bring college courses online — but it’s specifically focused
on making the “best” courses available. Here you’ll find a wealth of computer
science courses from schools not participating in the OCW program.</p>

<h3><a href="http://www.khanacademy.org/cs">khanacademy</a></h3>

<p>One of best known learning platform Khan Academy offers variety of courses, not only
computer science. It serves as an open playground for both novice and amateurs
particularly interested in learning drawing, animation and user interaction with code.</p>

<p>Be ready to code next Facebook.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tips for fasten your workflow in terminal]]></title>
    <link href="http://www.chennainerd.in/blog/2014/02/18/tips-for-faster-workflow-in-terminal/"/>
    <updated>2014-02-18T18:00:13+05:30</updated>
    <id>http://www.chennainerd.in/blog/2014/02/18/tips-for-faster-workflow-in-terminal</id>
    <content type="html"><![CDATA[<p>Without a doubt and question, Terminal is home for all programmers.
It always wonderful to have shortcuts to save our precious seconds.
Here we will discuss about techniques to fasten your workflow.
Place all <code>bash</code> function and aliases inside your <code>.bash_profile</code> or <code>.bashrc</code>.</p>

<h3>Create and Change Directory</h3>

<p>Generally, we create a folder and then <code>cd</code> to created directory.
We can do it by</p>

<pre><code>take ()
{
    mkdir -p $1 &amp;&amp; cd $1
}
</code></pre>

<p>Type <code>take foobar</code> will create and change directory to <code>foobar</code></p>

<h3>Run static server</h3>

<p>If you are a web developer, you wanted to view static files in browser.
Run your static server by</p>

<pre><code>server ()
{
    local port="${1:-8000}";
    open "http://localhost:${port}/";
    python -c 'import SimpleHTTPServer;
    map = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;
    map[""] = "text/plain";
    for key, value in map.items():
        map[key] = value + ";charset=UTF-8";
    SimpleHTTPServer.test();' "$port"
}
</code></pre>

<p>Type <code>server</code> insider any directory and visit <code>http://localhost:8000/</code> in browser</p>

<h3>Git aliases</h3>

<p>If you are a git user, following aliases will save your time a lot.</p>

<pre><code>alias gcl='git clone'
alias ga='git add .'
alias gall='git add -A'
alias gst='git status'
alias gc='git commit -v'
alias gco='git checkout'
alias gl='git pull'
alias gp='git push'
alias gpo='git push origin'
</code></pre>

<h3>Run previous command</h3>

<p><code>!!</code> represents the previous command. Most of the time, we forgot to type sudo for
some command.</p>

<pre><code>sudo !!
</code></pre>

<p>Above will run the previous command with <code>sudo</code>. CAUTION: Your previous command MUST NOT BE
 <code>rm -rf /</code> :).</p>

<h3>Go back to old directory</h3>

<p>Sometimes we want to change directory to previous working directory which we changed from. And revert to previous working directory we can use same command. This is vary much useful cd command.</p>

<pre><code>cd -
</code></pre>

<p>We know, there are lot of cool tips out there. Share with us what you got.
Happy hacking.</p>
]]></content>
  </entry>
  
</feed>
